# Source about connecting to drone and getting message https://mavlink.io/en/mavgen_python/
#source 2 about connecting drone https://dronekit-python.readthedocs.io/en/latest/examples/vehicle_state.html
#source 3 getting drone attributes https://dronekit-python.readthedocs.io/en/latest/guide/vehicle_state_and_parameters.html#vehicle-state-read-attributes
import time
import os
import subprocess
from dronekit import connect, VehicleMode, LocationGlobalRelative, LocationGlobal, Command
import argparse  

# Define the message ID for DO_SET_CAM_TRIG_DISTANCE command
DO_SET_CAM_TRIG_DISTANCE_MSG_ID = 206
#############################################################################################################################################
#moving through directory to save photos when camera take images.
os.chdir('image')
currentDir =os.getcwd()
print(currentDir)

#############################################################################################################################################
#connecting the to the drone or ardupilot or pixhawk

#Method 1
#connection_string = 'serial:/dev/serial0'
#vehicle = connect(connection_string, baud=921600, wait_ready=True)

#Method 2
parser = argparse.ArgumentParser(description='Print out vehicle state information. Connects to SITL on local PC by default.')
parser.add_argument('--connect', 
                   help="vehicle connection target string. If not specified, SITL automatically started and used.")
args = parser.parse_args()

connection_string = args.connect

vehicle = connect(connection_string, wait_ready=True)

#Testing connection to UAS
if vehicle.armed == True:
    print("CONNECTION SUCCESSFUL!!")
else:
    print("FAILED CONNECTION")

#############################################################################################################################################

#intialize and declare num image file name
num = 1
#connect the camera
connectCMD = ('gphoto2','--auto-detect')
result=subprocess.run(connectCMD,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
print('Camera Connected')

#############################################################################################################################################
def droneData(attitude):
    #Setting the variable  with gps coordinates, yaw pitch and roll
            #using split method to split string so we can get individual value of yaw,pitch and roll
            attitudeSplit = attitude.split(",")
            pitchSplit = attitudeSplit[0].split("=")
            #The pitch value
            pitch = pitchSplit[1]
            yawSplit = attitudeSplit[1].split("=")
            #yaw value
            yaw = yawSplit[1]
            rollSplit = attitudeSplit[2].split("=")
            #roll value
            roll = rollSplit[1]
            #Getting the UAS location in long and lat
            gps = vehicle.location.global_frame
            #splitting the string so we can get the value of longitude and latitude
            gpsSplit = gps.split(",")
            latSplit = gpsSplit[0].split("=")
            #value of the lat
            lat = latSplit[1]
            lonSplit = gpsSplit[1].split("=")
            #value of the long
            lon = longSplit[1]
            #Send inputs as a string not int
            pitch=str(pitch)
            roll=str(roll)
            yaw=str(yaw)
            lat=str(lat)
            lon=str(lon)


#############################################################################################################################################

#triggering the camera and saves image with filename. filename is always incremented with num so doesnt overwrite prev photo
def triggerCommand(num,pitch,roll,yaw,lat,lon):
    #Setting up the filename for the image
    filename = ('image'+ str(num) +'.jpg')
    print("images file name: " + filename)

    #Triggering camera 
    cmd = ('gphoto2','--capture-image-and-download','--filename',filename)
    print(cmd)

    #executing in ssh
    result2 = subprocess.run(cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    print('Image taken')
   

    #geotagging image with drone sensory data
    pyr = ('pitch:'+pitch+' yaw:'+yaw+' roll:'+roll)
    print(pyr)
    tagPYRCommand = ('exiftool', '-comment=' + pyr , filename)
    print(tagPYRCommand)
    tagLatCommand = ('exiftool', '-exif:gpslatitude=' +'\''+ lat +'\'' , filename)
    tagLongCommand = ('exiftool', '-exif:gpslongitude=' +'\''+ lon +'\'' , filename)
   

    #executing the tag command in ssh
    subprocess.run(tagPYRCommand,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    subprocess.run(tagLatCommand,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    subprocess.run(tagLongCommand,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
   
#############################################################################################################################################

def DO_SET_CAM_TRIG_DISTANCE(self ,name, message):
        print('DO_SET_CAM_TRIG_DISTANCE received:', message)
        attitude = vehicle.attitude
        droneData(attitude)
        #Trigger the camera and geotagging
        triggerCommand(num,pitch,roll,yaw,lat,lon)
        #increment num so next image doesnt overwrite prev image
        num = num + 1

#############################################################################################################################################

while(vehicle.armed == True):
    #listening for do_set_cam_trig_dist
    vehicle.add_message_listener('DO_SET_CAM_TRIG_DISTANCE', DO_SET_CAM_TRIG_DISTANCE)


vehicle.close()