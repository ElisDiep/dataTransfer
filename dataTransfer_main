# Source about connecting to drone and getting message https://mavlink.io/en/mavgen_python/
#second source about connecting drone https://dronekit-python.readthedocs.io/en/latest/examples/vehicle_state.html

import time
import os
import subprocess
from pymavlink import mavutil
from dronekit import connect, VehicleMode, LocationGlobalRelative, LocationGlobal, Command

# Define the message ID for DO_SET_CAM_TRIG_DISTANCE command
DO_SET_CAM_TRIG_DISTANCE_MSG_ID = 206

os.chdir('image')
currentDir =os.getcwd()
print(currentDir)

#connecting the to the drone or ardupilot or pixhawk
#mav = mavutil.mavlink_connection('/dev/ttyS0', baud=57600)
connection_string = 'serial:/dev/ttyAMA0:57600'
vehicle = connect(connection_string, wait_ready=True)
#Testing print connection
if vehicle.armed == True:
    print("CONNECTION SUCCESSFUL!!")
else:
    print("FAILED CONNECTION")

#intialize and declare num
num = 1
#connect the camera
connectCMD = ('gphoto2','--auto-detect')
result=subprocess.run(connectCMD,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
print('Camera Connected')

#triggering the camera and saves image with filename. filename is always incremented with num so doesnt overwrite prev photo
def triggerCommand(num,pitch,roll,yaw,lat,lon):
    filename = ('image'+ str(num) +'.jpg')
    print(filename)
    cmd = ('gphoto2','--capture-image-and-download','--filename',filename)
    print(cmd)
    #executing the trigger command in ssh
    result2 = subprocess.run(cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    print('complete')
   
    #geotagging image
    #Geotagging photo with the attitude and gps coordinate
    pyr = ('pitch:'+pitch+' yaw:'+yaw+' roll:'+roll)
    print(pyr)
    tagPYRCommand = ('exiftool', '-comment=' + pyr , filename)
    print(tagPYRCommand)
    tagLatCommand = ('exiftool', '-exif:gpslatitude=' +'\''+ lat +'\'' , filename)
    tagLongCommand = ('exiftool', '-exif:gpslongitude=' +'\''+ lon +'\'' , filename)
   

    #executing the tag command in ssh
    subprocess.run(tagPYRCommand,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    subprocess.run(tagLatCommand,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    subprocess.run(tagLongCommand,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
   
while(vehicle.armed == True):
    # Receive a MAVLink message from the Pixhawk
    msg = mav.recv_msg()

    # Check if the message is a DO_SET_CAM_TRIG_DISTANCE command
    if msg and msg.get_type() == 'DO_SET_CAM_TRIG_DISTANCE':
        #Setting the variable  with gps coordinates, yaw pitch and roll
            attitude = vehicle.attitude
            #using split method to split string so we can get individual value of yaw,pitch and roll
            attitudeSplit = attitude.split(",")
            pitchSplit = attitudeSplit[0].split("=")
            #The pitch value
            pitch = pitchSplit[1]
            yawSplit = attitudeSplit[1].split("=")
            #yaw value
            yaw = yawSplit[1]
            rollSplit = attitudeSplit[2].split("=")
            #roll value
            roll = rollSplit[1]
            #Getting the UAS location in long and lat
            gps = vehicle.location.global_frame
            #splitting the string so we can get the value of longitude and latitude
            gpsSplit = gps.split(",")
            latSplit = gpsSplit[0].split("=")
            #value of the lat
            lat = latSplit[1]
            lonSplit = gpsSplit[1].split("=")
            #value of the long
            lon = longSplit[1]
            #Send inputs as a string not int
            pitch=str(pitch)
            roll=str(roll)
            yaw=str(yaw)
            lat=str(lat)
            lon=str(lon)
            #Trigger the camera and geotagging
            triggerCommand(pitch,roll,yaw,lat,lon)
    
    time.sleep(0.1)